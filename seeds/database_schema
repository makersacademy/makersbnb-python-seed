# Two Tables Design Recipe Template

_Copy this recipe template to design and create two related database tables from a specification._

## 1. Extract nouns from the user stories or specification

```
# EXAMPLE USER STORY:
# (analyse only the relevant part - here, the final line).

As a user i want to be able to create an account for MakersBNB

As a user I want to be able to log in to my created account

As a user i want to be able to add a new space

As a user i want to be able to list multiple spaces

As a user i want to be able to add a name, description and price per night to my space

As a user i want to be able to add a date range available to my space

As a user i would like to be able to mark the nights which a space has already been booked

As a user, until a booking request has been confirmed, that space can still be booked for the night

```

```
Nouns:

user, username, space, space name, description, date, price per night, booking, confirmed
```

## 2. Infer the Table Name and Columns

Put the different nouns in this table. Replace the example with your own nouns.

| Record                | Properties          |
| --------------------- | ------------------  |
| User                  | username, password
| Space                 | name, description, price, user_id
| Date                  | space_id, date, confirmed
| Booking               | date_id, user_id

1. Name of the first table (always plural): `Users` 

    Column names: `username, password`

2. Name of the second table (always plural): `Spaces` 

    Column names: `name, description, price, user_id`

3. `Dates`
    `date`, `confirmed`, `space_id`

4. `Bookings`
    `date_id`, `user_id`

## 3. Decide the column types

[Here's a full documentation of PostgreSQL data types](https://www.postgresql.org/docs/current/datatype.html).

Most of the time, you'll need either `text`, `int`, `bigint`, `numeric`, or `boolean`. If you're in doubt, do some research or ask your peers.

Remember to **always** have the primary key `id` as a first column. Its type will always be `SERIAL`.

```
# EXAMPLE:

Table: users
id: SERIAL
username: text
password: text

Table: spaces
id: SERIAL
name: text
description: text
price: float
user_id: int

Table: dates
id: SERIAL
date: date
confirmed: Boolean
space_id: int

Table: Bookings
id: SERIAL
date_id: int
user_id: int
```

## 4. Decide on The Tables Relationship

Most of the time, you'll be using a **one-to-many** relationship, and will need a **foreign key** on one of the two tables.

To decide on which one, answer these two questions:

1. Can one [TABLE ONE] have many [TABLE TWO]? (Yes/No)
2. Can one [TABLE TWO] have many [TABLE ONE]? (Yes/No)

You'll then be able to say that:

1. **[A] has many [B]**
2. And on the other side, **[B] belongs to [A]**
3. In that case, the foreign key is in the table [B]

Replace the relevant bits in this example with your own:

```
# EXAMPLE

1. Can one user have many spaces? YES
2. Can one space have many users? NO

-> Therefore,
-> An user HAS MANY albums
-> An spaces BELONGS TO an user

-> Therefore, the foreign key is on the spaces table.

1. Can one space have many dates? YES
2. Can one date have many spaces? NO

-> Therefore,
-> An space HAS MANY dates
-> A date BELONGS TO a space

-> Therefore, the foreign key is on the date table.

1. Can one date have many bookings? YES
2. Can one booking have many dates? NO

-> Therefore,
-> A date HAS MANY bookings
-> A booking BELONGS TO a date

-> Therefore, the foreign key is on the Bookings table.

1. Can one user have many bookings? YES
2. Can one booking have many users? NO

-> Therefore,
-> A user HAS MANY bookings
-> A booking BELONGS TO a user

-> Therefore, the foreign key is on the bookings table.
```

*If you can answer YES to the two questions, you'll probably have to implement a Many-to-Many relationship, which is more complex and needs a third table (called a join table).*

## 5. Write the SQL

```sql
-- EXAMPLE
-- file: albums_table.sql

-- Replace the table name, columm names and types.

-- Create the table without the foreign key first.
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  username: text,
  password: text
);

-- Then the table with the foreign key second.
CREATE TABLE spaces (
  id SERIAL PRIMARY KEY,
  name: text,
  description: text,
  price: float,
-- The foreign key name is always {other_table_singular}_id
  user_id int,
  constraint fk_user foreign key(user_id)
    references users(id)
    on delete cascade
);

CREATE TABLE dates (
  id SERIAL PRIMARY KEY,
  date: date,
  confirmed: boolean,
-- The foreign key name is always {other_table_singular}_id
  space_id int,
  constraint fk_space foreign key(space_id)
    references spaces(id)
    on delete cascade
);

CREATE TABLE spaces (
  id SERIAL PRIMARY KEY,
  date_id int,
  constraint fk_date foreign key(date_id)
    references dates(id)
    on delete cascade
  user_id int,
  constraint fk_user foreign key(user_id)
    references users(id)
    on delete cascade
);
```

## 6. Create the tables

```bash
psql -h 127.0.0.1 database_name < albums_table.sql
```